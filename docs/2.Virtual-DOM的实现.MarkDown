## 真实DOM的操作过程

首先复习一下真实DOM的解析和渲染过程。<br>
浏览器的渲染机制主要有以下几步： **创建DOM树——创建StyleRules——创建Render树——布局Layout——绘制Painting**
1. 用HTML分析器，分析HTML元素，构建DOM树；
2. 用css分析器，分析style文件和元素上的inline样式，生成样式表;
3. 将DOM树和样式表结合起来，每个DOM都有一个attach方法，接受了相应的样式信息，返回一个render树。
4. 有了render树之后，就可以确定每一个节点在显示器的精确定位（Layout步骤）;
5. render树和每个节点的坐标也都有了，调用每个节点的paint节点，把它们绘制出来。

![](https://upload-images.jianshu.io/upload_images/4345378-b7ccad3bc808783f.png?imageMogr2/auto-orient/strip|imageView2/2/w/624/format/webp)

可以看到，操作真实DOM的步骤很多，计算真实DOM的坐标点很复杂，虽然我们现在的计算机更新迭代很快，但是DOM的代价仍然是昂贵的，频繁操作还是会出现页面卡顿，影响用户体验。

## Virtual DOM是什么

虚拟DOM是一个JS对象，可以模拟真实的DOM节点。好处就是数据更新的时候，不需要经过解析和渲染真实DOM的五个步骤，只要将更新的diff反应到这个js对象中就好了。操作JS肯定会比操作DOM来得快得多，避免了许多计算量，等更新完成后，再将最终的virtual DOM映射成真实的DOM即可。

## Diff实现